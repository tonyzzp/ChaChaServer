// Code generated by protoc-gen-go. DO NOT EDIT.
// source: login.proto

package protobeans

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Login struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *Login) Reset()                    { *m = Login{} }
func (m *Login) String() string            { return proto.CompactTextString(m) }
func (*Login) ProtoMessage()               {}
func (*Login) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Login) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Login) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *LoginResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *LoginResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Regist struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *Regist) Reset()                    { *m = Regist{} }
func (m *Regist) String() string            { return proto.CompactTextString(m) }
func (*Regist) ProtoMessage()               {}
func (*Regist) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Regist) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Regist) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RegistResponse struct {
	Ok       bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error    string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	UserId   int32  `protobuf:"varint,3,opt,name=userId" json:"userId,omitempty"`
	UserName string `protobuf:"bytes,4,opt,name=userName" json:"userName,omitempty"`
}

func (m *RegistResponse) Reset()                    { *m = RegistResponse{} }
func (m *RegistResponse) String() string            { return proto.CompactTextString(m) }
func (*RegistResponse) ProtoMessage()               {}
func (*RegistResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RegistResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *RegistResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RegistResponse) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RegistResponse) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func init() {
	proto.RegisterType((*Login)(nil), "protobeans.Login")
	proto.RegisterType((*LoginResponse)(nil), "protobeans.LoginResponse")
	proto.RegisterType((*Regist)(nil), "protobeans.Regist")
	proto.RegisterType((*RegistResponse)(nil), "protobeans.RegistResponse")
}

func init() { proto.RegisterFile("login.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xc9, 0x4f, 0xcf,
	0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0x53, 0x49, 0xa9, 0x89, 0x79, 0xc5,
	0x4a, 0xf6, 0x5c, 0xac, 0x3e, 0x20, 0x29, 0x21, 0x29, 0x2e, 0x8e, 0xd2, 0xe2, 0xd4, 0xa2, 0xbc,
	0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x38, 0x1f, 0x24, 0x57, 0x90, 0x58,
	0x5c, 0x5c, 0x9e, 0x5f, 0x94, 0x22, 0xc1, 0x04, 0x91, 0x83, 0xf1, 0x95, 0x4c, 0xb9, 0x78, 0xc1,
	0x06, 0x04, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0xf1, 0x71, 0x31, 0xe5, 0x67, 0x83,
	0x8d, 0xe0, 0x08, 0x62, 0xca, 0xcf, 0x16, 0x12, 0xe1, 0x62, 0x4d, 0x2d, 0x2a, 0xca, 0x2f, 0x82,
	0xea, 0x84, 0x70, 0x94, 0x1c, 0xb8, 0xd8, 0x82, 0x52, 0xd3, 0x33, 0x8b, 0x4b, 0xc8, 0xb6, 0x38,
	0x8b, 0x8b, 0x0f, 0x62, 0x02, 0x69, 0x36, 0x0b, 0x89, 0x71, 0xb1, 0x81, 0xcc, 0xf7, 0x4c, 0x91,
	0x60, 0x56, 0x60, 0xd4, 0x60, 0x0d, 0x82, 0xf2, 0x60, 0xee, 0xf0, 0x03, 0xb9, 0x83, 0x05, 0xe1,
	0x0e, 0x10, 0x3f, 0x89, 0x0d, 0x1c, 0x62, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x4f,
	0x37, 0xb8, 0x47, 0x01, 0x00, 0x00,
}
